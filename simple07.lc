let
    map f x = case x of
                Nil -> Nil
                Cons a xs -> Cons (f a) (map f xs)

    l = Cons 1 (Cons 2 (Cons 3 Nil))
    go z = case z of
            Nil -> 0
            Cons b bs -> add b (go bs)
    five y = mul 5 y
    fromto0 v = case v of
                  0 -> Nil
                  _ -> Cons v (fromto0 (add v (-1.0)))
    k = fromto0 1000

    zip a b = case a of
                Nil -> Nil
                Cons av al -> case b of
                                Nil -> Nil
                                Cons bv bl -> Cons (Pair av bv) (zip al bl)

    unzip a = case a of
                Nil -> Pair Nil Nil
                Cons av al -> case av of
                                Pair v1 v2 -> case unzip al of
                                                Pair v1l v2l -> Pair (Cons v1 v1l) (Cons v2 v2l)
in unzip (zip k k)--(map (\y -> mul 5 y) k)
