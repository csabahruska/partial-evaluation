main = store (CInt 1); \t1 ->
       store (CInt 10); \t2 ->
       store (Fupto t1 t2); \t3 ->
       store (Fsum t3); \t4 ->
       eval t4; \(CInt i') ->
       intPrint i'

upto m n = eval m; \(CInt m') ->
           eval n; \(CInt n') ->
           intGT m' n'; \b' ->
           if b' then
            return (CNil)
           else
            intAdd m' 1; \x' ->
            store (CInt x'); \t5 ->
            store (Fupto t5 n); \t6 ->
            return (CCons m t6)

sum l = eval l; \u ->
        case u of
          (CNil)       -> return (CInt 0)
          (CCons t ts) -> eval t; \(CInt t') ->
                          sum ts; \(CInt r') ->
                          intAdd t' r'; \s' ->
                          return (CInt s')

eval p = fetch p; \v ->
         case v of
          (CInt x')     -> return v
          (CNil)        -> return v
          (CCons x xs)  -> return v
          (Fupto a b)   -> upto a b; \w ->
                           update p w; \() ->
                           return w
          (Fsum c)      -> sum c; \z ->
                           update p z; \() ->
                           return z

-------------

main = t1 <- store (CInt 1)
       t2 <- store (CInt 10)
       t3 <- store (Fupto t1 t2)
       t4 <- store (Fsum t3)
       (CInt i') <- eval t4
       intPrint i'

upto m n = (CInt m') <- eval m
           (CInt n') <- eval n
           b' <- intGT m' n'
           if b' then
            return (CNil)
           else
            x' <- intAdd m' 1
            t5 <- store (CInt x')
            t6 <- store (Fupto t5 n)
            return (CCons m t6)

sum l = u <- eval l
        case u of
          (CNil)       -> return (CInt 0)
          (CCons t ts) -> (CInt t') <- eval t
                          (CInt r') <- sum ts
                          s' <- intAdd t' r'
                          return (CInt s')

eval p = v <- fetch p
         case v of
          (CInt x')     -> return v
          (CNil)        -> return v
          (CCons x xs)  -> return v
          (Fupto a b)   -> w <- upto a b
                           update p w
                           return w
          (Fsum c)      -> z <- sum c
                           update p z
                           return z

-------------

sum l = eval l => u
        case u of
          (CNil)       -> return (CInt 0)
          (CCons t ts) -> eval t => (CInt t')
                          sum ts => (CInt r')
                          intAdd t' r' => s'
                          return (CInt s')

eval p = fetch p => v
         case v of
          (CInt x')     -> return v
          (CNil)        -> return v
          (CCons x xs)  -> return v
          (Fupto a b)   -> upto a b => w
                           update p w
                           return w
          (Fsum c)      -> sum c => z
                           update p z
                           return z
